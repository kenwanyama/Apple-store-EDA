CREATE TABLE appleStore_description_combined AS

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4

**EXPLARATORY DATA ANALYSIS**

--Check the number of unique app in both tablesAppStore

SELECT COUNT (DISTINCT id) as UniqueAppIDs
FROM AppleStore

SELECT COUNT (DISTINCT id) As UniqueAppIDs
FROM appleStore_description_combined

--check for any missing values in key fields 

SELECT COUNT(*) AS missingValues
from AppleStore
WHERE track_name is null or user_rating is null or prime_genre is NULL

SELECT COUNT(*) AS missingValues
from appleStore_description_combined
WHERE app_desc is NULL

--Find out the numer of apps per genreAppleStore

size_bytes prime_genre, COUNT(*) as  NumApps
FROM AppleStore
GROUP by prime_genre
ORDER by NumApps DESC

--Get an overview of the apps ratings

SELECT min(user_rating) as MinRating,
       max(user_rating) as MaxRating,
       avg(user_rating) as AvgRating
       from AppleStore
       
       
--Get distribution of Apps prices
SELECT 
     (price / 2) * 2 As PriceBinStart,
     ((price / 2) * 2) + 2 as PriceBinEnd,
     COUNT(*) as NumApps
from AppleStore

GROUP by PriceBinStart
ORDER by PriceBinStart

**DATA ANALYSIS**

--Determine whether paid apps have higher ratings that free Apps 
SELECT CASE
           WHEN price > 0 THEN 'Paid'
           ELSE 'Free'
       End as App_Type,
       avg(user_rating) as Avg_Rating
FROM AppleStore
GROUP by App_Type

--Check if apps with more supported languages have higher ratings

SELECT CASE
           when lang_num < 10 then '<10 Languages'
           WHEn lang_num BETWEEN 10 and 30 then '10-30 Languages'
           ELSE '>10 Languages'
      end as language_bucket,
      avg(user_rating) as Avg_Rating
      
FROM AppleStore
GROUP by language_bucket
ORDER by Avg_Rating DESC

--Check genres with low ratings 
SELECT prime_genre,
      avg(user_rating) as Avg_Rating
fROM AppleStore
order by Avg_Rating ASc 
limit 10

--Check if there is correlation between length of description and user rating 

SELECT case
            when length(b.app_desc) < 500 then 'Short'
            when length(b.app_desc) BETWEEN 500 and 1000 then 'Medium'
            ELSE 'Long'
         end as description_length_bucket,
         avg(a.user_rating) as average_rating
FROM
      AppleStore as a
JOIN
      appleStore_description_combined as b
ON
    a.id = b.id    
    
GROUP by description_length_bucket
ORDER average_rating DESC

--check the top_rated apps for each genre 
SELECT
   prime_genre,
   track_name,
   user_rating

from (
      SELECT
      prime_genre,
      track_name,
      user_rating,
      RANK() OVER(PARTITION by prime_genre order by user_rating DESC, rating_count_tot DESC) as rank
      from 
      AppleStore
    ) as a 
WHERE
a.rank =  1

